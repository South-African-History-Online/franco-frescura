#!/bin/bash
# Production build script for Franco Frescura Archive
# This script builds the Hugo site for production deployment

set -e  # Exit on error

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}================================================${NC}"
echo -e "${BLUE}Franco Frescura Archive - Production Build${NC}"
echo -e "${BLUE}================================================${NC}"

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
HUGO_DIR="$PROJECT_ROOT/hugo-site"
PUBLIC_DIR="$HUGO_DIR/public"

# Check if hugo-site directory exists
if [ ! -d "$HUGO_DIR" ]; then
    echo -e "${RED}Error: hugo-site directory not found at $HUGO_DIR${NC}"
    exit 1
fi

# Change to hugo-site directory
cd "$HUGO_DIR"

# Clean previous build
echo -e "\n${YELLOW}1. Cleaning previous build...${NC}"
if [ -d "$PUBLIC_DIR" ]; then
    rm -rf "$PUBLIC_DIR"
    echo -e "${GREEN}   ✓ Removed old public/ directory${NC}"
fi

# Check if Hugo is installed
if command -v hugo &> /dev/null; then
    echo -e "\n${YELLOW}2. Building with local Hugo...${NC}"
    HUGO_VERSION=$(hugo version)
    echo -e "${BLUE}   Using: $HUGO_VERSION${NC}"

    # Build with Hugo
    hugo --minify
    BUILD_METHOD="local"

elif command -v docker &> /dev/null; then
    echo -e "\n${YELLOW}2. Building with Docker (Hugo not found locally)...${NC}"
    echo -e "${BLUE}   Using: klakegg/hugo:0.111.3-ext-alpine${NC}"

    # Build with Docker
    docker run --rm -v "$(pwd):/src" klakegg/hugo:0.111.3-ext-alpine --minify
    BUILD_METHOD="docker"

else
    echo -e "${RED}Error: Neither Hugo nor Docker found. Please install one of them.${NC}"
    echo -e "${YELLOW}Install Hugo: https://gohugo.io/installation/${NC}"
    echo -e "${YELLOW}Install Docker: https://docs.docker.com/get-docker/${NC}"
    exit 1
fi

# Verify build
echo -e "\n${YELLOW}3. Verifying build...${NC}"
if [ ! -d "$PUBLIC_DIR" ]; then
    echo -e "${RED}   ✗ Build failed: public/ directory not created${NC}"
    exit 1
fi

# Count files
HTML_COUNT=$(find "$PUBLIC_DIR" -name "*.html" | wc -l)
CSS_COUNT=$(find "$PUBLIC_DIR" -name "*.css" | wc -l)
JS_COUNT=$(find "$PUBLIC_DIR" -name "*.js" | wc -l)
IMAGE_COUNT=$(find "$PUBLIC_DIR" -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) | wc -l)

echo -e "${GREEN}   ✓ Build successful!${NC}"
echo -e "${BLUE}   - HTML files: $HTML_COUNT${NC}"
echo -e "${BLUE}   - CSS files: $CSS_COUNT${NC}"
echo -e "${BLUE}   - JS files: $JS_COUNT${NC}"
echo -e "${BLUE}   - Images: $IMAGE_COUNT${NC}"

# Calculate size
SIZE=$(du -sh "$PUBLIC_DIR" | cut -f1)
echo -e "${BLUE}   - Total size: $SIZE${NC}"

# Create .htaccess for cPanel
echo -e "\n${YELLOW}4. Creating .htaccess for cPanel...${NC}"
cat > "$PUBLIC_DIR/.htaccess" << 'EOF'
# Franco Frescura Archive - Apache/cPanel Configuration
# Generated by build-production.sh

# Enable RewriteEngine
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /

    # Force HTTPS (uncomment if SSL is configured)
    # RewriteCond %{HTTPS} off
    # RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

    # Remove .html extension
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME}.html -f
    RewriteRule ^(.+)$ $1.html [L]

    # Handle directory index files
    RewriteCond %{REQUEST_FILENAME} -d
    RewriteCond %{REQUEST_FILENAME}/index.html -f
    RewriteRule ^(.+)/$ $1/index.html [L]

    # Custom 404 page
    ErrorDocument 404 /404.html
</IfModule>

# Security Headers
<IfModule mod_headers.c>
    # Prevent clickjacking
    Header always set X-Frame-Options "SAMEORIGIN"

    # XSS Protection
    Header always set X-XSS-Protection "1; mode=block"

    # Prevent MIME type sniffing
    Header always set X-Content-Type-Options "nosniff"

    # Referrer Policy
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
</IfModule>

# Compression
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/json
</IfModule>

# Browser Caching
<IfModule mod_expires.c>
    ExpiresActive On

    # Images
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/webp "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"

    # CSS and JavaScript
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType text/javascript "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"

    # HTML
    ExpiresByType text/html "access plus 1 week"

    # Fonts
    ExpiresByType font/woff2 "access plus 1 year"
    ExpiresByType font/woff "access plus 1 year"
    ExpiresByType font/ttf "access plus 1 year"
</IfModule>

# Protect sensitive files
<FilesMatch "^(\.git|\.env|\.htaccess|\.htpasswd)">
    Require all denied
</FilesMatch>

# UTF-8 encoding
AddDefaultCharset UTF-8
EOF

echo -e "${GREEN}   ✓ .htaccess created${NC}"

# Create deployment info file
echo -e "\n${YELLOW}5. Creating deployment info...${NC}"
cat > "$PUBLIC_DIR/.deployment-info" << EOF
Build Date: $(date '+%Y-%m-%d %H:%M:%S %Z')
Build Method: $BUILD_METHOD
Git Branch: $(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
Git Commit: $(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
Hugo Version: $(hugo version 2>/dev/null || echo "N/A (built with Docker)")
EOF

echo -e "${GREEN}   ✓ Deployment info created${NC}"

# Final summary
echo -e "\n${BLUE}================================================${NC}"
echo -e "${GREEN}✓ Production build complete!${NC}"
echo -e "${BLUE}================================================${NC}"
echo -e "\n${YELLOW}Next steps:${NC}"
echo -e "1. Review the build in: ${BLUE}$PUBLIC_DIR${NC}"
echo -e "2. Test locally: ${BLUE}cd hugo-site/public && python3 -m http.server 8000${NC}"
echo -e "3. Deploy to cPanel: ${BLUE}./scripts/deploy-cpanel.sh${NC}"
echo -e "\n${YELLOW}Or manually upload the contents of:${NC}"
echo -e "${BLUE}$PUBLIC_DIR${NC}"
echo -e "${YELLOW}to your cPanel public_html directory${NC}\n"
