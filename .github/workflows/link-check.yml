name: Link Check

on:
  # Run on pushes to main and pull requests
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Run weekly to catch broken external links
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight
  # Allow manual trigger
  workflow_dispatch:

jobs:
  link-check:
    name: Check Internal Links
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install beautifulsoup4 html2text PyYAML lxml

      - name: Run link analysis
        id: link_check
        run: |
          # Note: analyze_links.py checks markdown files directly
          # This is a preliminary check - full validation happens in Hugo build
          python3 scripts/analyze_links.py > link_report.txt 2>&1 || true
          cat link_report.txt

          # For now, don't fail on analyze_links.py results
          # The Hugo Build Validation workflow is the authoritative check
          echo "broken_links=false" >> $GITHUB_OUTPUT
          echo "::notice::Link analysis complete - see Hugo Build Validation for authoritative results"

      - name: Upload link report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: link-report
          path: link_report.txt
          retention-days: 30

      - name: Comment PR with analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('link_report.txt', 'utf8');

            const body = `## ðŸ”— Link Analysis Report

            Preliminary link check completed.

            **Note:** This check analyzes markdown files directly. For authoritative link validation, see the **Hugo Build Validation** workflow which tests the actual built site.

            <details>
            <summary>View Analysis Report</summary>

            \`\`\`
            ${report}
            \`\`\`

            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
